% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model_constructors.R
\name{ode_model}
\alias{ode_model}
\title{Define a custom derivatives model with no neural network}
\usage{
ode_model(
  data,
  derivs,
  initial_parameters,
  covariates = NULL,
  time_column_name = "time",
  proc_weight = 1,
  obs_weight = 1,
  l = 10^3,
  extrap_rho = 0.1,
  bayesian = FALSE,
  uid = gsub(x = format(Sys.time(), "\%Y\%m\%d\%H\%M\%OS6"), pattern = "[.]", replacement
    = "")
)
}
\arguments{
\item{data}{A data frame of observed state variables over time.}

\item{derivs}{A user-defined function of the form \code{derivs(u,nn,p,t)} where
\code{u} stores the value of the state variables, \code{nn} stores the neural network
outputs, \code{p} stores the model parameters, and \code{t} is time. The function should
save each ODE to \code{du[i]}, where \code{i} is an index for each time derivative.}

\item{initial_parameters}{A named list containing the model parameters stored
in \code{p}.}

\item{covariates}{A data frame of observed covariates (e.g., environmental
conditions) over time. This data frame must have the same column
name for time as the primary dataset, but the time points do not need to
match because the values of the covariates between time points included in
the data frame \code{covariates} are interpolated using a linear spline. Optional.}

\item{time_column_name}{The column in \code{data} and \code{covariates} that contains
the time data, indicating when the observations were made.}

\item{proc_weight}{Weight of the process error term \eqn{\nu_t} in the loss
function. The process weight controls how closely the model predictions
match the state estimates \eqn{\hat{u}_t}.}

\item{obs_weight}{Weight of the observation error term \eqn{\epsilon_t} in the loss
function. The observation weight controls how closely the state estimates
\eqn{\hat{u}_t} match the observations \eqn{y_t}. Smaller values of the observation weight
correspond to datasets with larger amounts of observation error and vice versa.}

\item{l}{Extrapolation length scale parameter for forecasting. \code{l} controls
how quickly correlations decay with distance between points (i.e., how wiggly the function is).
Small values lead to fast decay and the extrapolation reverts to the prior mean
quickly beyond the observed data. Large values lead to slow decay and the extrapolation
stays similar to the last trend for a longer period.}

\item{extrap_rho}{Extrapolation marginal SD parameter for forecasting.
\code{extrap_rho} controls the magnitude of the extrapolation. Small values lead to
narrow confidence intervals, large values lead to wide confidence intervals.}

\item{bayesian}{Logical (\code{TRUE} or \code{FALSE}) for whether or not the UDE is a
Bayesian UDE.}

\item{uid}{A string that serves as a unique identifier to save the
model into Julia. It is not recommended to modify this parameter.}
}
\value{
An untrained ODE model containing all the defined parameters.
}
\description{
\code{ode_model()} constructs an ordinary differential equation (ODE) model. It
does not train a neural network and can be used as a null model.
}
\examples{
print("test")
}
